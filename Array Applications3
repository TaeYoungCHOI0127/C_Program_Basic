#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

int n = 0;

void read_file(const char* filename, double X[], double Y[], double Angle[])
{
    FILE* file = fopen(filename, "r");

    if (file == NULL)
    {
        printf("File doesn't exist\n");
        return;
    }

    while (fscanf(file, "%lf %lf %lf", &X[n], &Y[n], &Angle[n]) != EOF)
    {
        n++;
        if (n >= 100)
        {
            break;
        }
    }

    fclose(file);
}

void interval(double X_ref[], double Y_ref[], double X[], double Y[])
{
    for (int i = 1; i < n; ++i)
    {
        X_ref[i] = X[i] - X[i - 1];
        Y_ref[i] = Y[i] - Y[i - 1];
    }
}

void relative_coordinate(double X_ref[], double Y_ref[], double X[], double Y[])
{
    for (int i = 0; i < n; ++i)
    {
        X_ref[i] = X[i] - X[0];
        Y_ref[i] = Y[i] - Y[0];
    }
}

void DIST(double X[], double Y[], double Dist[])
{
    for (int i = 1; i < n; ++i)
    {
        Dist[i] = sqrt((X[i] - X[i - 1]) * (X[i] - X[i - 1]) + (Y[i] - Y[i - 1]) * (Y[i] - Y[i - 1]));
    }
}

void YawAngles(double x[], double y[], int count, double yaw_angle[])
{
    for (int i = 0; i < n - 1; i++)
    {
        double dx = x[i + 1] - x[i];
        double dy = y[i + 1] - y[i];

        double angle = atan2(dy, dx) * 180.0 / 3.141592;

        if (angle < 0) angle += 360.0;

        yaw_angle[i] = angle;
    }

}

int main(void)
{
    double X[100] = { 0.0 };
    double Y[100] = { 0.0 };
    double Angle[100] = { 0.0 };
    double X_ref[100] = { 0.0 };
    double Y_ref[100] = { 0.0 };
    double Dist[100] = { 0.0 };
    double yaw_angle[100] = { 0.0 };
    int num = 0;

    printf("(1) waypoint 데이터 출력\n");
    printf("(2) waypoint 간의 간격 출력\n");
    printf("(3) waypoint 상대좌표 출력\n");
    printf("(4) waypoint 거리 출력\n");
    printf("(5) waypoint 각도 출력\n");
    scanf("%d", &num);


    read_file("waypoint.txt", X, Y, Angle);

    switch (num)
    {
    case 1:
    {
        for (int i = 0; i < n; i++)
        {
            printf("X[%d] = %lf, Y[%d] = %lf, Angle[%d] = %lf\n", i, X[i], i, Y[i], i, Angle[i]);
        }
        break;
    }

    case 2:
    {
        interval(X_ref, Y_ref, X, Y);
        for (int i = 0; i < n; i++)
        {
            printf("Interval - X[%d] = %lf, Y[%d] = %lf\n", i, X_ref[i], i, Y_ref[i]);
        }
        break;
    }

    case 3:
    {
        relative_coordinate(X_ref, Y_ref, X, Y);
        for (int i = 0; i < n; i++)
        {
            printf("Relative Coordinate - X_ref[%d] = %lf, Y_ref[%d] = %lf\n", i, X_ref[i], i, Y_ref[i]);
        }
        break;
    }

    case 4:
    {
        DIST(X, Y, Dist);
        for (int i = 0; i < n; i++)
        {
            printf("Distance[%d] = %lf\n", i, Dist[i]);
        }
        break;
    }

    case 5:
    {
        YawAngles(X, Y, n, yaw_angle);
        for (int i = 0; i < n-1; i++)
        {
            printf("Yaw angle %d and %d: %.2f degrees\n", i, i + 1, yaw_angle[i]);
        }
        break;
    }
    }
    return 0;
}
------


#include <math.h> // atan2, M_PI 함수 사용을 위한 헤더

void YawAngles(double x[], double y[], int count, double yaw_angle[])
{
    // count 값보다 하나 적은 만큼 반복
    for (int i = 0; i < count - 1; i++)
    {
        // 현재와 다음 좌표의 x와 y 차이 계산
        double dx = x[i + 1] - x[i];
        double dy = y[i + 1] - y[i];

        // atan2 함수를 사용하여 두 좌표 사이의 각도 계산 (라디안에서 도로 변환)
        double angle = atan2(dy, dx) * 180.0 / M_PI;

        // 각도가 음수일 경우 360도를 더하여 양수로 변환
        if (angle < 0) angle += 360.0;

        // 계산된 각도를 yaw_angle 배열에 저장
        yaw_angle[i] = angle;
    }
}
