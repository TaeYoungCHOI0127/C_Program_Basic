#include <stdio.h>
#include <stdlib.h>

// 행렬 덧셈 함수
double *matrix_sum(double *mat_a, double *mat_b, int rows, int cols) {
    // 결과 행렬을 저장할 메모리 동적 할당
    double *result = (double *)malloc(rows * cols * sizeof(double));

    // 메모리 할당 실패 체크
    if (result == NULL) {
        printf("메모리 할당 실패\n");
        return NULL;
    }

    // 행렬 덧셈 수행
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            // 2차원 인덱스를 1차원 배열의 인덱스로 변환하여 덧셈
            result[i * cols + j] = mat_a[i * cols + j] + mat_b[i * cols + j];
        }
    }

    return result;
}

// 행렬 출력 함수
void print_matrix(double *mat, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%.2f ", mat[i * cols + j]);
        }
        printf("\n");
    }
}

int main() {
    int a, b, c, d, i, j;

    // 첫 번째 행렬의 크기 입력
    printf("첫 번째 행렬의 크기 입력 (행 X 열): ");
    scanf("%d %d", &a, &b);

    // 두 번째 행렬의 크기 입력
    printf("두 번째 행렬의 크기 입력 (행 X 열): ");
    scanf("%d %d", &c, &d);

    // 두 행렬의 크기가 동일해야 행렬 덧셈이 가능함
    if (a != c || b != d) {
        printf("행렬 덧셈이 불가능합니다. 두 행렬의 크기가 동일해야 합니다.\n");
        return 1;
    }

    // 첫 번째 행렬과 두 번째 행렬에 대한 메모리 할당 (double형 사용)
    double *A = (double *)malloc(a * b * sizeof(double));
    double *B = (double *)malloc(c * d * sizeof(double));

    // 메모리 할당 실패 체크
    if (A == NULL || B == NULL) {
        printf("메모리 할당 실패\n");
        return 1;
    }

    // 첫 번째 행렬의 원소 입력
    printf("첫 번째 행렬의 원소들을 입력해주세요:\n");
    for (i = 0; i < a; i++) {
        for (j = 0; j < b; j++) {
            scanf("%lf", &A[i * b + j]);
        }
    }

    // 두 번째 행렬의 원소 입력
    printf("두 번째 행렬의 원소들을 입력해주세요:\n");
    for (i = 0; i < c; i++) {
        for (j = 0; j < d; j++) {
            scanf("%lf", &B[i * d + j]);
        }
    }

    // 행렬 덧셈 수행
    double *C = matrix_sum(A, B, a, b);

    if (C != NULL) {
        // 결과 행렬 출력
        printf("두 행렬의 덧셈 결과는:\n");
        print_matrix(C, a, b);

        // 동적 할당한 메모리 해제
        free(C);
    }

    // 동적 할당한 메모리 해제
    free(A);
    free(B);

    return 0;
}
/*
#include <stdio.h>
#include <stdlib.h>

double *matrix_multiplex(double *mat_a, double *mat_b, int rows_a, int cols_a, int rows_b, int cols_b) {
    // 곱셈을 하기 위해서는 mat_a의 열 수(cols_a)와 mat_b의 행 수(rows_b)가 같아야 한다.
    if (cols_a != rows_b) {
        printf("행렬 곱셈이 불가능합니다. A의 열 수와 B의 행 수가 일치해야 합니다.\n");
        return NULL;
    }

    // 결과 행렬을 저장할 메모리 동적 할당
    double *result = (double *)malloc(rows_a * cols_b * sizeof(double));
    if (result == NULL) {
        printf("메모리 할당 실패\n");
        return NULL;
    }

    // 행렬 곱셈 수행
    for (int i = 0; i < rows_a; i++) {
        for (int j = 0; j < cols_b; j++) {
            result[i * cols_b + j] = 0; // 초기화
            for (int k = 0; k < cols_a; k++) {
                result[i * cols_b + j] += mat_a[i * cols_a + k] * mat_b[k * cols_b + j];
            }
        }
    }

    return result;
}

void print_matrix(double *mat, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%.2f ", mat[i * cols + j]);
        }
        printf("\n");
    }
}

int main() {
    int rows_a, cols_a, rows_b, cols_b;

    // 첫 번째 행렬의 크기 입력
    printf("첫 번째 행렬의 크기 입력 (행 열): ");
    scanf("%d %d", &rows_a, &cols_a);

    // 두 번째 행렬의 크기 입력
    printf("두 번째 행렬의 크기 입력 (행 열): ");
    scanf("%d %d", &rows_b, &cols_b);

    // 첫 번째 행렬과 두 번째 행렬에 대한 메모리 할당
    double *A = (double *)malloc(rows_a * cols_a * sizeof(double));
    double *B = (double *)malloc(rows_b * cols_b * sizeof(double));

    printf("첫 번째 행렬의 원소들을 입력해주세요:\n");
    for (int i = 0; i < rows_a; i++) {
        for (int j = 0; j < cols_a; j++) {
            scanf("%lf", &A[i * cols_a + j]);
        }
    }

    printf("두 번째 행렬의 원소들을 입력해주세요:\n");
    for (int i = 0; i < rows_b; i++) {
        for (int j = 0; j < cols_b; j++) {
            scanf("%lf", &B[i * cols_b + j]);
        }
    }

    // 행렬 곱셈 수행
    double *C = matrix_multiplex(A, B, rows_a, cols_a, rows_b, cols_b);

    if (C != NULL) {
        printf("두 행렬의 곱셈 결과는:\n");
        print_matrix(C, rows_a, cols_b);

        // 동적 할당한 메모리 해제
        free(C);
    }

    // 동적 할당한 메모리 해제
    free(A);
    free(B);

    return 0;
}
*/
